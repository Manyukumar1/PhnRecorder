package com.example.phnrecorder;

import android.Manifest;
import android.app.NotificationManager;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.media.MediaRecorder;
import android.net.Uri;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Environment;
import android.os.Handler;
import android.os.IBinder;
import android.provider.CalendarContract;
import android.provider.ContactsContract;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.NotificationCompat;
import android.support.v4.content.ContextCompat;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.widget.Toast;

import com.android.internal.telephony.ITelephony;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.iid.FirebaseInstanceId;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.UUID;
import android.telephony.TelephonyManager;

import com.android.internal.telephony.ITelephony;
import static android.widget.Toast.LENGTH_LONG;
import static android.widget.Toast.makeText;
//import static com.example.phnrecorder.disconnectTelephone.*;

public class TService extends Service {

    char p;
    int n;
    MediaRecorder recorder;
    int seconds;
    File audiofile;
    String name, phonenumber;
    String audio_format;
    public String Audio_Type;
    int audioSource;
    Context context;
    // private Handler handler;
    //Timer timer;
    public String mFileName;
    String inCall, s;
    int i = 1;
    Boolean offHook = false, ringing = false;
    Toast toast;
    Boolean isOffHook = false;
    ITelephony telephony;
    //    char p = 'A';
//    int n = 0;
    private boolean recordstarted = false;
    private StorageReference mstorage;

    private static final String ACTION_IN = "android.intent.action.PHONE_STATE";
    private static final String ACTION_OUT = "android.intent.action.NEW_OUTGOING_CALL";
    private CallBr br_call;


    @Override
    public void onDestroy() {
        Log.d("service", "destroy");

        super.onDestroy();
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        // final String terminate =(String)
        // intent.getExtras().get("terminate");//
        // intent.getStringExtra("terminate");
        // Log.d("TAG", "service started");
        //
        // TelephonyManager telephony = (TelephonyManager)
        // getSystemService(Context.TELEPHONY_SERVICE); // TelephonyManager
        // // object
        // CustomPhoneStateListener customPhoneListener = new
        // CustomPhoneStateListener();
        // telephony.listen(customPhoneListener,
        // PhoneStateListener.LISTEN_CALL_STATE);
        // context = getApplicationContext();
        //onTaskRemoved(intent);
        final IntentFilter filter = new IntentFilter();
        filter.addAction(ACTION_OUT);
        filter.addAction(ACTION_IN);
        this.br_call = new CallBr();
        this.registerReceiver(this.br_call, filter);

        // if(terminate != null) {
        // stopSelf();
        // }
        return START_NOT_STICKY;
    }

    @Override
    public IBinder onBind(Intent arg0) {
        // TODO Auto-generated method stub
        return null;
    }
    // @Override

   /* @Override
    public void onTaskRemoved(Intent rootIntent)
    {
        Intent restartServiceIntent=new Intent(getApplicationContext(),this.getClass());
        restartServiceIntent.setPackage(getPackageName());
        startService(restartServiceIntent);
        super.onTaskRemoved(rootIntent);
    }*/


    public class CallBr extends BroadcastReceiver {
        Bundle bundle;
        String state;

        public boolean wasRinging = false;
        //private MediaRecorder mrecorder;

        //private StorageReference mStorage = FirebaseStorage.getInstance().getReference();

        public String findNameByNumber(String num) {
            String res = null;
            try {
                ContentResolver resolver = getApplicationContext().getContentResolver();
                Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(num));
                Cursor c = resolver.query(uri, new String[]{ContactsContract.PhoneLookup.DISPLAY_NAME}, null, null, null);

                if (c != null) { // cursor not null means number is found contactsTable
                    if (c.moveToFirst()) {   // so now find the contact Name
                        res = c.getString(c.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));

                    }
                    c.close();
                }
                if (c == null) {
                    return null;
                }
            } catch (Exception ex) {
            }
            return res;
        }

        public void onReceive(Context context, Intent intent) {
            if (intent.getAction().equals(ACTION_IN)) {
                if ((bundle = intent.getExtras()) != null) {
                    state = bundle.getString(TelephonyManager.EXTRA_STATE);
                    if (state.equals(TelephonyManager.EXTRA_STATE_RINGING)) {
                        inCall = bundle.getString(TelephonyManager.EXTRA_INCOMING_NUMBER);
                        s = findNameByNumber(inCall);
                        n = inCall.length();
                        p = inCall.charAt(n - 1);
                        wasRinging = true;
                        if (s == null)
                            Toast.makeText(context, "IN : " + inCall + " UnknownNumber", LENGTH_LONG).show();
                        else
                            Toast.makeText(context, "IN : " + inCall + s, LENGTH_LONG).show();


                        // Toast.makeText(context, "IN : " , Toast.LENGTH_LONG).show();
                    } else if (state.equals(TelephonyManager.EXTRA_STATE_OFFHOOK)) {
                        if (wasRinging == true && s == null) {

                            Toast.makeText(context, "ANSWERED", LENGTH_LONG).show();
                            //  Toast.makeText(MainActivity.this, "YOUR MESSAGE", LENGTH_LONG).show();

                            // String out = new SimpleDateFormat("dd-MM-yyyy hh-mm-ss").format(new Date());
                            //File sampleDir = new File(Environment.getExternalStorageDirectory().getAbsolutePath());
                            mFileName = Environment.getExternalStorageDirectory().getAbsolutePath();
                            mFileName += "/manyu.mp3";
                            //String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
                            // mFileName = Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + timeStamp;

                            //mProgress.setMessage("uploading")
                            //String id = FirebaseInstanceId.getInstance().getId();

                            /*if (!sampleDir.exists()) {
                                sampleDir.mkdirs();
                            }
                            String file_name = "Record";
                            try {
                                audiofile = File.createTempFile(file_name, ".amr", sampleDir);
                            } catch (IOException e) {
                                e.printStackTrace();
                            }*/
                            //String path = Environment.getExternalStorageDirectory().getAbsolutePath();

                            recorder = new MediaRecorder();
                            // recorder.setAudioSource(MediaRecorder.AudioSource.VOICE_CALL);
                            recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
                            recorder.setOutputFormat(MediaRecorder.OutputFormat.AMR_NB);
                            recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
                            recorder.setOutputFile(mFileName);
                            try {
                                recorder.prepare();
                            } catch (IllegalStateException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            recorder.start();
                            recordstarted = true;

                       /* int x=timer();
                        if(x==10)
                        {
                            String uniqueID = UUID.randomUUID().toString();
                            mstorage = FirebaseStorage.getInstance().getReference();
                            final StorageReference filepath = mstorage.child("Audio").child(uniqueID + inCall).child("real.mp3");

                            Uri uri = Uri.fromFile(new File(mFileName).getAbsoluteFile());
                            filepath.putFile(uri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                                @Override
                                public void onSuccess(final UploadTask.TaskSnapshot taskSnapshot) {
                                    Toast.makeText(getApplicationContext(), "Recorded successfully", LENGTH_LONG).show();
                                }
                            });
                            filepath.putFile(uri).addOnFailureListener(new OnFailureListener() {
                                @Override
                                public void onFailure(@NonNull Exception e) {
                                    Toast.makeText(getApplicationContext(), "Record unsucessfull", LENGTH_LONG).show();
                                }
                            });

                        }*/
                            /////manyukumar338sxkjsnkn

                            if (p == '7') {
                                Toast.makeText(getApplicationContext(), "SPAM CALL", LENGTH_LONG).show();
                                xtimer();
                                ytimer();

                                // Toast.makeText(getApplicationContext(), "YESTIMER", LENGTH_LONG).show();


                         /*   if (intent.getStringExtra(TelephonyManager.EXTRA_INCOMING_NUMBER) != null) {
                                inCall = intent.getStringExtra(TelephonyManager.EXTRA_INCOMING_NUMBER);
                                //Toast.makeText(context, "INCOMING call catched: ", Toast.LENGTH_SHORT).show();

                                //Toast.makeText(getApplicationContext(), "NOTIMER", LENGTH_LONG).show();


                            }*/
                            }
                        }

                    } else if (state.equals(TelephonyManager.EXTRA_STATE_IDLE)) {
                        wasRinging = false;
                        Toast.makeText(context, "REJECTED", LENGTH_LONG).show();
                        if (recordstarted) {
                            recorder.stop();
                            recordstarted = false;
                            String uniqueID = UUID.randomUUID().toString();
                            mstorage = FirebaseStorage.getInstance().getReference();
                            final StorageReference filepath = mstorage.child("Audio").child(uniqueID + inCall).child("real.mp3");

                            Uri uri = Uri.fromFile(new File(mFileName).getAbsoluteFile());
                            filepath.putFile(uri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                                @Override
                                public void onSuccess(final UploadTask.TaskSnapshot taskSnapshot) {
                                    Toast.makeText(getApplicationContext(), "Recorded successfully99999", LENGTH_LONG).show();
                                }
                            });
                            filepath.putFile(uri).addOnFailureListener(new OnFailureListener() {
                                @Override
                                public void onFailure(@NonNull Exception e) {
                                    Toast.makeText(getApplicationContext(), "Record unsucessfull888888", LENGTH_LONG).show();
                                }
                            });


                        }                            //uploadAudio()                        }
                    }
                }
            }
//             else if (intent.getAction().equals(ACTION_OUT)) {
//                if ((bundle = intent.getExtras()) != null) {
//                    outCall = intent.getStringExtra(Intent.EXTRA_PHONE_NUMBER);
//                    Toast.makeText(context, "OUT : " + outCall, Toast.LENGTH_LONG).show();
//                }
//            }


        }

    }


    //@Override
    public void xtimer() {
        seconds = 12;
        CountDownTimer countDownTimer = new CountDownTimer(seconds * 1000, 1000) {
            @Override
            public void onTick(long l) {
                l = (int) l / 1000;
                if (l == 1) {
                    String uniqueID = UUID.randomUUID().toString();
                    mstorage = FirebaseStorage.getInstance().getReference();
                    final StorageReference filepath = mstorage.child("Audio").child(uniqueID + "gjjhjhbj" + inCall).child("real.mp3");

                    Uri uri = Uri.fromFile(new File(mFileName).getAbsoluteFile());
                    filepath.putFile(uri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                        @Override
                        public void onSuccess(final UploadTask.TaskSnapshot taskSnapshot) {
                            Toast.makeText(getApplicationContext(), "Recorded successfully1234", LENGTH_LONG).show();
                        }
                    });
                    filepath.putFile(uri).addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            Toast.makeText(getApplicationContext(), "Record unsucessfull123658", LENGTH_LONG).show();
                        }
                    });
                }
            }

            @Override
            public void onFinish() {
                //disconnectPhoneItelephony(context);
                // seconds=20;

            }
        }.start();
    }

    public void ytimer() {
        seconds = 25;
        CountDownTimer countDownTimer = new CountDownTimer(seconds * 1000, 1000) {
            @Override
            public void onTick(long l) {
                l = (int) l / 1000;
                if (l == 1) {
                    String uniqueID = UUID.randomUUID().toString();
                    mstorage = FirebaseStorage.getInstance().getReference();
                    final StorageReference filepath = mstorage.child("Audio").child(uniqueID + "manyumishra" + inCall).child("real.mp3");

                    Uri uri = Uri.fromFile(new File(mFileName).getAbsoluteFile());
                    filepath.putFile(uri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                        @Override
                        public void onSuccess(final UploadTask.TaskSnapshot taskSnapshot) {
                            Toast.makeText(getApplicationContext(), "Recorded successfully789548", LENGTH_LONG).show();
                        }
                    });
                    filepath.putFile(uri).addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            Toast.makeText(getApplicationContext(), "Record unsucessfull123658", LENGTH_LONG).show();
                        }
                    });
                }

            }

            @Override
            public void onFinish() {

                // seconds=20;

            }

        }.start();
    }

    private void disconnectPhoneItelephony(Context context) {
        ITelephony telephonyService;
        TelephonyManager telephony = (TelephonyManager)
                context.getSystemService(Context.TELEPHONY_SERVICE);
        try {
            Class c = Class.forName(telephony.getClass().getName());
            Method m = c.getDeclaredMethod("getITelephony");
            m.setAccessible(true);
            telephonyService = (ITelephony) m.invoke(telephony);
            //timer();
            telephonyService.endCall();
            Toast.makeText(getApplicationContext(), "YESTIMER", LENGTH_LONG).show();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}

